use crate::macaddress::MacAddress64; // Import the type from macaddress.rs
use pcap::Device;

pub struct Exploit {
    pub source_mac: MacAddress64,
    pub pppoe_softc: u64,
}

impl Exploit {
    fn update_source_mac(&mut self, value: u64) {
        self.source_mac = MacAddress64::from_u64(value);
        println!("[+] Source MAC: {}", self.source_mac);
    }

    fn build_fake_ifnet(&mut self) {
        // Upper bytes are reserved for session ID
        self.update_source_mac(self.pppoe_softc + 0x07)
    }

    pub fn ppp_negotiation(&mut self) {
        // Wait for PADI, throwing away the first.
        let mut cap = Device::lookup().unwrap().unwrap().open().unwrap();

        while let Ok(packet) = cap.next_packet() {
            // Check if PADI
        }
        // Extracting Host Unique Tag and populating the self.pppoe_softc
        // Setting Target and Source MAC Addresses
        // Then finally build the fake interface
    }
}
